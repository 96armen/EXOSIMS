from EXOSIMS.Observatory.SotoStarshade_SKi import SotoStarshade_SKi as sss
import unittest
import numpy as np
import astropy.units as u
from scipy.integrate import solve_ivp
import astropy.constants as const
import hashlib
import scipy.optimize as optimize
from scipy.optimize import basinhopping
import scipy.interpolate as interp
import scipy.integrate as intg
from scipy.integrate import solve_bvp
from copy import deepcopy
import time
import os
import pickle

class TestSotoStarshadeSKi(unittest.TestCase):
    """
    Sonny Rappaport, July 2021, Cornell

    This class tests particular methods from SotoStarshade_Ski. 
    
    """

    def test_convertTime_to_dim(self):
      
        """tests covertTime_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python """


        #tests an array of input integers from 0 to 100

        input = np.linspace(0, 100, num=101)
        output = u.yr*[0.0, 0.15915494309189535, 0.3183098861837907, 0.477464829275686, 0.6366197723675814, 0.7957747154594768, 0.954929658551372, 1.1140846016432675, 1.2732395447351628, 1.432394487827058, 1.5915494309189535, 1.7507043740108488, 1.909859317102744, 2.0690142601946393, 2.228169203286535, 2.3873241463784303, 2.5464790894703255, 2.705634032562221, 2.864788975654116, 3.0239439187460113, 3.183098861837907, 3.3422538049298023, 3.5014087480216975, 3.660563691113593, 3.819718634205488, 3.9788735772973833, 4.138028520389279, 4.297183463481174, 4.45633840657307, 4.615493349664965, 4.7746482927568605, 4.933803235848756, 5.092958178940651, 5.252113122032546, 5.411268065124442, 5.570423008216337, 5.729577951308232, 5.888732894400127, 6.047887837492023, 6.207042780583918, 6.366197723675814, 6.525352666767709, 6.684507609859605, 6.8436625529515, 7.002817496043395, 7.16197243913529, 7.321127382227186, 7.480282325319081, 7.639437268410976, 7.798592211502871, 7.957747154594767, 8.116902097686662, 8.276057040778557, 8.435211983870452, 8.594366926962348, 8.753521870054243, 8.91267681314614, 9.071831756238035, 9.23098669932993, 9.390141642421826, 9.549296585513721, 9.708451528605616, 9.867606471697512, 10.026761414789407, 10.185916357881302, 10.345071300973197, 10.504226244065093, 10.663381187156988, 10.822536130248883, 10.981691073340778, 11.140846016432674, 11.300000959524569, 11.459155902616464, 11.61831084570836, 11.777465788800255, 11.93662073189215, 12.095775674984045, 12.25493061807594, 12.414085561167836, 12.573240504259733, 12.732395447351628, 12.891550390443523, 13.050705333535419, 13.209860276627314, 13.36901521971921, 13.528170162811104, 13.687325105903, 13.846480048994895, 14.00563499208679, 14.164789935178685, 14.32394487827058, 14.483099821362476, 14.642254764454371, 14.801409707546267, 14.960564650638162, 15.119719593730057, 15.278874536821952, 15.438029479913848, 15.597184423005743, 15.756339366097638, 15.915494309189533]

        np.testing.assert_array_equal(sss.convertTime_to_dim(self,input),output)

    def test_convertPos_to_dim(self):

        """tests convertPos_to_dim with some trivial inputs. Because the canonical 
        units are in AU, simply check to see that the input is returned with astropy
        AU units attached. 
        """

        #tests that an array of input integers from 0 to 100 is returned with units
        input = np.linspace(0,100, num=101)
        np.testing.assert_array_equal(sss.convertPos_to_dim(self,input),input*u.AU)

    def test_convertVel_to_dim(self): 

        """tests convertVel_to_dim with some trivial inputs, with outputs generated
        via a locally run Jupyter notebook with python 
        Input units: 1/2pi 
        """

        #tests that an array of input integers from 0 to 100 is returned with units 
        input = np.linspace(0,100, num=101)

        output = u.AU/u.yr*[0.0, 6.283185307179586, 12.566370614359172, 18.84955592153876, 25.132741228718345, 31.41592653589793, 37.69911184307752, 43.982297150257104, 50.26548245743669, 56.548667764616276, 62.83185307179586, 69.11503837897544, 75.39822368615503, 81.68140899333463, 87.96459430051421, 94.24777960769379, 100.53096491487338, 106.81415022205297, 113.09733552923255, 119.38052083641213, 125.66370614359172, 131.94689145077132, 138.23007675795088, 144.51326206513048, 150.79644737231007, 157.07963267948966, 163.36281798666926, 169.64600329384882, 175.92918860102841, 182.212373908208, 188.49555921538757, 194.77874452256717, 201.06192982974676, 207.34511513692635, 213.62830044410595, 219.9114857512855, 226.1946710584651, 232.4778563656447, 238.76104167282426, 245.04422698000386, 251.32741228718345, 257.610597594363, 263.89378290154264, 270.1769682087222, 276.46015351590177, 282.7433388230814, 289.02652413026095, 295.3097094374406, 301.59289474462014, 307.8760800517997, 314.1592653589793, 320.4424506661589, 326.7256359733385, 333.0088212805181, 339.29200658769764, 345.57519189487726, 351.85837720205683, 358.1415625092364, 364.424747816416, 370.7079331235956, 376.99111843077515, 383.27430373795477, 389.55748904513433, 395.84067435231395, 402.1238596594935, 408.4070449666731, 414.6902302738527, 420.97341558103227, 427.2566008882119, 433.53978619539146, 439.822971502571, 446.10615680975064, 452.3893421169302, 458.6725274241098, 464.9557127312894, 471.23889803846896, 477.5220833456485, 483.80526865282815, 490.0884539600077, 496.37163926718733, 502.6548245743669, 508.93800988154646, 515.221195188726, 521.5043804959057, 527.7875658030853, 534.0707511102648, 540.3539364174444, 546.637121724624, 552.9203070318035, 559.2034923389832, 565.4866776461628, 571.7698629533423, 578.0530482605219, 584.3362335677015, 590.6194188748811, 596.9026041820607, 603.1857894892403, 609.4689747964198, 615.7521601035994, 622.0353454107791, 628.3185307179587]

        np.testing.assert_array_equal(sss.convertVel_to_dim(self,input),output)
        





